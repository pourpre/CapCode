var capcode = typeof capcode === "object" ? capcode : {}; capcode["sql"] =
/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, { enumerable: true, get: getter });
/******/ 		}
/******/ 	};
/******/
/******/ 	// define __esModule on exports
/******/ 	__webpack_require__.r = function(exports) {
/******/ 		if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 			Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 		}
/******/ 		Object.defineProperty(exports, '__esModule', { value: true });
/******/ 	};
/******/
/******/ 	// create a fake namespace object
/******/ 	// mode & 1: value is a module id, require it
/******/ 	// mode & 2: merge all properties of value into the ns
/******/ 	// mode & 4: return value when already ns object
/******/ 	// mode & 8|1: behave like require
/******/ 	__webpack_require__.t = function(value, mode) {
/******/ 		if(mode & 1) value = __webpack_require__(value);
/******/ 		if(mode & 8) return value;
/******/ 		if((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;
/******/ 		var ns = Object.create(null);
/******/ 		__webpack_require__.r(ns);
/******/ 		Object.defineProperty(ns, 'default', { enumerable: true, value: value });
/******/ 		if(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));
/******/ 		return ns;
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = "./src/sql/js/capcode-sql.js");
/******/ })
/************************************************************************/
/******/ ({

/***/ "./src/core/js/capcode-utils.js":
/*!**************************************!*\
  !*** ./src/core/js/capcode-utils.js ***!
  \**************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.ajouterElement = ajouterElement;
exports.ajouterElementAvant = ajouterElementAvant;
exports.chargerFichier = chargerFichier;
exports.lireFichier = lireFichier;
exports.enregistrerFichier = enregistrerFichier;
/* UTILITAIRES
 * Manipulation de fichiers, du DOM...
 * ------------------------------------------------------------------------------------------ */

function creerElement(type) {
    var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

    var element = document.createElement(type);

    if (options.hasOwnProperty('id')) {
        // ID de l'élément
        element.id = options.id;
    }

    if (options.hasOwnProperty('text')) {
        // Texte de l'élément
        element.innerText = options.text;
    }

    if (options.hasOwnProperty('class')) {
        // Classes attribuées
        DOMTokenList.prototype.add.apply(element.classList, options.class);
    }

    if (options.hasOwnProperty('type')) {
        // type de l'élément input
        element.type = options.type;
    }

    if (options.hasOwnProperty('disabled')) {
        // Attribut DISABLED
        element.disabled = options.disabled;
    }

    if (options.hasOwnProperty('for')) {
        // Association des labels à leurs inputs
        element.htmlFor = options.for;
    }

    if (options.hasOwnProperty('src')) {
        // Attribut src
        element.src = options.src;
    }

    if (options.hasOwnProperty('href')) {
        // Attribut href
        element.href = options.href;
    }

    if (options.hasOwnProperty('title')) {
        // Attribut title
        element.title = options.title;
    }

    if (options.hasOwnProperty('target')) {
        // Attribut target
        element.target = options.target;
    }

    return element;
}

/* Fonction générique d'ajout d'un élément d'interface
 *
 * @param type (string) Type d'élément à insérer
 * @param parent (Element) Conteneur de l'élément créé
 * @param options (Object) Liste des options - 'id' : ID de l'élément créé, 'text' : contenu texte,
 *                                             'class' : tableau de classes à attribuer à l'élément,
 *                                             'disabled' : valeur de l'attribut DISABLED de l'élément
 */
function ajouterElement(type, parent) {
    var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};

    var nouvelElement = creerElement(type, options);
    parent.appendChild(nouvelElement);
    return nouvelElement;
}

function ajouterElementAvant(type, parent, reference) {
    var options = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};

    var nouvelElement = creerElement(type, options);
    parent.appendChild(nouvelElement, reference);
    return nouvelElement;
}

// Chargement du contenu d'un fichier à partir de son adresse
function chargerFichier(source, callback) {
    var f = new XMLHttpRequest();
    f.open('GET', source, false);
    f.overrideMimeType('text/plain');
    f.onreadystatechange = function () {
        if (f.readyState === 4) {
            if (f.status === 200 || f.status === 0) {
                callback(f.response);
            }
        }
    };
    f.send();
}

// Lecture d'un fichier
function lireFichier(fichier, callback) {
    var fileReader = new FileReader();
    fileReader.onload = function (event) {
        callback(event.target.result);
    };

    fileReader.readAsText(fichier, "UTF-8");
}

// Enregistrement
function enregistrerFichier(data, filename, type) {
    var file = new Blob([data], {
        type: type
    });
    if (window.navigator.msSaveOrOpenBlob) {
        // IE10+
        window.navigator.msSaveOrOpenBlob(file, filename);
    } else {
        // Others
        var a = document.createElement("a"),
            url = URL.createObjectURL(file);
        a.href = url;
        a.download = filename;
        document.body.appendChild(a);
        a.click();
        setTimeout(function () {
            document.body.removeChild(a);
            window.URL.revokeObjectURL(url);
        }, 0);
    }
}

/***/ }),

/***/ "./src/sql/js/capcode-sql-reponses.js":
/*!********************************************!*\
  !*** ./src/sql/js/capcode-sql-reponses.js ***!
  \********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});
var reponsesTests = exports.reponsesTests = {
    diapo2: {
        'Test_1': 1740489161
    }
};

var reponsesEntrainements = exports.reponsesEntrainements = {
    diapo2: {
        'Entrainement_1': -667795682
    }
};

/***/ }),

/***/ "./src/sql/js/capcode-sql.js":
/*!***********************************!*\
  !*** ./src/sql/js/capcode-sql.js ***!
  \***********************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var _showdown = __webpack_require__(/*! showdown */ "showdown");

var _showdown2 = _interopRequireDefault(_showdown);

var _codemirror = __webpack_require__(/*! codemirror */ "codemirror");

var _codemirror2 = _interopRequireDefault(_codemirror);

var _perfectScrollbar = __webpack_require__(/*! perfect-scrollbar */ "perfect-scrollbar");

var _perfectScrollbar2 = _interopRequireDefault(_perfectScrollbar);

var _sql = __webpack_require__(/*! sql */ "sql");

var _sql2 = _interopRequireDefault(_sql);

var _capcodeUtils = __webpack_require__(/*! ../../core/js/capcode-utils */ "./src/core/js/capcode-utils.js");

var _capcodeSqlReponses = __webpack_require__(/*! ./capcode-sql-reponses */ "./src/sql/js/capcode-sql-reponses.js");

__webpack_require__(/*! ../style/capcode-sql.scss */ "./src/sql/style/capcode-sql.scss");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/* Les paramètres éventuellement passés dans le fichier markdown source sont accessibles via l'objet capcode.core.params */

// import '../../share/js/capcode-showdown';
var CONCEPTION = true;

var zoneDiapo = void 0,
    scrollbarTables = void 0,
    scrollbarDiapo = void 0,
    indexDiapo = void 0,
    editeur = void 0,
    boutonGo = void 0,
    zoneTables = void 0,
    zoneEditeur = void 0,
    zoneResultat = void 0,
    nbResultats = void 0,
    scrollbarResultat = void 0;

// Chargement de la page => initialisation de la coloration syntaxique dans la zone de saisie
document.addEventListener('capcodeCoreLoaded', function () {
    editeur = _codemirror2.default.fromTextArea(document.getElementById("editeur"), {
        lineNumbers: true,
        theme: "capcode-light",
        lineWrapping: true,
        mode: "text/x-pgsql",
        extraKeys: {
            'Ctrl-Enter': lancerRequete
        }
    });
    editeur.setValue('SELECT * FROM personnes;');
});

// Interface core en place => Finalisation de l'interface SQL
document.addEventListener('capcodeCoreInterface', function (event) {
    // Finalisation de l'interface (ajout de boutons spécifiques SQL...)
    var zoneActionsSQL = document.getElementById('actions-theme');

    // Bouton de sauvegarde de la saisie
    var imgLogo = (0, _capcodeUtils.ajouterElement)('img', zoneActionsSQL, {
        class: ['logo'],
        src: 'assets/sql/logo_capsql.svg'
    });

    // Bouton de sauvegarde de la saisie
    var boutonDownload = (0, _capcodeUtils.ajouterElement)('button', zoneActionsSQL, {
        class: ['btn', 'btn--default-light'],
        title: 'Sauvegarder'
    });
    var iconeBoutonDownload = (0, _capcodeUtils.ajouterElement)('i', boutonDownload, {
        text: 'save',
        class: ['material-icons']
    });

    // Bouton de chargement d'un script précédemment sauvegardé
    var inputOpen = (0, _capcodeUtils.ajouterElement)('input', zoneActionsSQL, {
        id: 'input-open',
        class: ['absent'],
        type: 'file'
    });
    var boutonInputOpen = (0, _capcodeUtils.ajouterElement)('label', zoneActionsSQL, {
        class: ['btn', 'btn--default-light'],
        title: 'Ouvrir un fichier',
        for: 'input-open'
    });
    var iconeBoutonInputOpen = (0, _capcodeUtils.ajouterElement)('i', boutonInputOpen, {
        text: 'folder',
        class: ['material-icons']
    });

    // Bouton d'inversion du thème
    var boutonTheme = (0, _capcodeUtils.ajouterElementAvant)('li', document.getElementById('liste-plus'), document.getElementById('li-contact'));
    (0, _capcodeUtils.ajouterElement)('i', boutonTheme, {
        class: ['material-icons'],
        text: 'toggle_theme'
    });
    (0, _capcodeUtils.ajouterElement)('span', boutonTheme, {
        text: "Changer le thème",
        class: ['cliquable']
    });

    boutonGo = document.getElementById('bouton-go');
    zoneTables = document.getElementById('zone-tables');
    zoneEditeur = document.getElementById('zone-editeur');
    zoneResultat = document.getElementById('zone-resultat');
    nbResultats = document.getElementById('nb-resultats');
    scrollbarResultat = new _perfectScrollbar2.default(zoneResultat);

    /* EVENEMENTS
     * ---------------------------------------------------------------------------------------------- */
    // Boutons d'action "Go"
    boutonGo.addEventListener('click', lancerRequete);
    boutonGo.classList.add('absent');

    // A chaque changement de diapo, actualisation des scrollbars
    document.addEventListener('capcodeCoreChgtDiapo', function (event) {
        indexDiapo = event.detail.index;
        scrollbarDiapo.update();
    });

    // Bouton d'action "Sauvegarder"
    boutonDownload.addEventListener('click', function () {
        (0, _capcodeUtils.enregistrerFichier)(editeur.getValue(), 'Sans nom.sql', 'text/sql');
    });

    // Chargement d'un fichier
    inputOpen.addEventListener('change', function (event) {
        (0, _capcodeUtils.lireFichier)(event.target.files[0], function (contenu) {
            editeur.setValue(contenu);
        });
    });

    // Inversion du thème
    boutonTheme.addEventListener('click', function (event) {
        var theme = editeur.getOption('theme') == 'capcode-dark' ? 'capcode-light' : 'capcode-dark';
        editeur.setOption('theme', theme);
    });

    // Mise à jour des scrollbars
    zoneDiapo = document.getElementById('zone-diapo');
    scrollbarDiapo = new _perfectScrollbar2.default(zoneDiapo);

    // Affichage de la liste des tables
    afficherTables();
});

// Chargement des tables sur le "serveur"
var db = new _sql2.default.Database();
(0, _capcodeUtils.chargerFichier)('assets/sql/capcode-sql-data.sql', function (script) {
    db.exec(script);
});

function lancerRequete() {
    var dbPromise = new Promise(function (resolve, reject) {
        var requete = db.exec(editeur.getValue());
        resolve(requete);
    }).then(function (resultat) {
        afficherResultat(resultat[resultat.length - 1]);
    }).catch(function (erreur) {
        afficherErreur(erreur);
    });
}

function verifierQuestions(index, queryResult) {
    var jsonResultat = hashReponse(JSON.stringify(queryResult));

    if (CONCEPTION) {
        console.log('Diapo ' + index, jsonResultat);
    }

    // La requête répond-elle à un test bloquant ?
    for (var test in _capcodeSqlReponses.reponsesTests['diapo' + index]) {
        if (_capcodeSqlReponses.reponsesTests['diapo' + index].hasOwnProperty(test)) {
            var reponseProposee = _capcodeSqlReponses.reponsesTests['diapo' + index][test];
            if (reponseProposee === jsonResultat) {
                emettreQuestionReussie(index, test, 'test');
            }
        }
    }

    // La requête répond-elle à un entrainement ?
    for (var entrainement in _capcodeSqlReponses.reponsesEntrainements['diapo' + index]) {
        if (_capcodeSqlReponses.reponsesEntrainements['diapo' + index].hasOwnProperty(entrainement)) {
            var _reponseProposee = _capcodeSqlReponses.reponsesEntrainements['diapo' + index][entrainement];
            if (_reponseProposee === jsonResultat) {
                // Emission d'un signal pour mise à jour du diaporama
                emettreQuestionReussie(index, entrainement, 'entrainement');
            }
        }
    }
}

function emettreQuestionReussie(index, test, type) {
    var testReussi = new CustomEvent('capcodeCoreQuestionReussie', {
        detail: {
            indexDiapo: index + 1,
            questionId: test,
            type: type
        }
    });
    document.dispatchEvent(testReussi);
}

function afficherResultat(resultat) {
    zoneResultat.innerHTML = '';

    verifierQuestions(indexDiapo, resultat);

    if (resultat === undefined) {
        // Aucun résultat
        nbResultats.innerText = 'Aucune ligne extraite'; // Affichage du nombre de lignes
    } else {
        // Présence d'au moins un résultat
        // Affichage du nombre de lignes
        if (resultat.values.length === 1) {
            nbResultats.innerText = '1 ligne extraite';
        } else {
            nbResultats.innerText = resultat.values.length + ' lignes extraites';
        }

        // Tableau de résultats

        var tableResultat = document.createElement('table');
        var theadResultat = document.createElement('thead');
        var tbodyResultat = document.createElement('tbody');
        var trTheadResultat = document.createElement('tr');

        resultat.columns.forEach(function (colonne) {
            var thTrTheadResultat = document.createElement('th');
            thTrTheadResultat.innerText = colonne;
            trTheadResultat.appendChild(thTrTheadResultat);
        });

        theadResultat.appendChild(trTheadResultat);
        tableResultat.appendChild(theadResultat);

        resultat.values.forEach(function (ligne) {
            var trTbodyResultat = document.createElement('tr');

            ligne.forEach(function (valeur) {
                var tdTrTbodyResultat = document.createElement('td');
                tdTrTbodyResultat.innerText = valeur;
                trTbodyResultat.appendChild(tdTrTbodyResultat);
            });

            tbodyResultat.appendChild(trTbodyResultat);
        });

        tableResultat.appendChild(tbodyResultat);

        zoneResultat.appendChild(tableResultat);
    }

    scrollbarResultat.update();
}

function afficherErreur(erreur) {
    zoneResultat.innerHTML = '';
    nbResultats.innerText = 'Une erreur s\'est produite :(';

    var pErreur = document.createElement('p');
    pErreur.innerText = erreur;
    pErreur.classList.add('erreur');
    zoneResultat.appendChild(pErreur);
}

function hashReponse(reponse) {
    var hash = 0;
    if (reponse.length == 0) {
        return hash;
    }
    for (var i = 0; i < reponse.length; i++) {
        var char = reponse.charCodeAt(i);
        hash = (hash << 5) - hash + char;
        hash = hash & hash; // Convert to 32bit integer
    }
    return hash;
}

// Alimentation de la liste des tables
function afficherTables() {
    var listeTables = db.exec("SELECT name FROM sqlite_master WHERE type='table';");
    var ulTables = document.createElement('ul');
    var spanTable = document.createElement('span');

    listeTables[0].values.forEach(function (table) {

        if (table != 'sqlite_sequence') {
            var liTable = document.createElement('li');
            liTable.classList.add('compact');
            liTable.innerText = table;
            liTable.title = 'Afficher les colonnes de la table';
            liTable.addEventListener('click', function (event) {
                event.target.classList.toggle('compact');
            });

            // Nom des tables

            var ulColonnes = document.createElement('ul');
            var liColonne = document.createElement('li');
            var listeColonnes = db.exec("pragma table_info(" + table + ");");

            listeColonnes[0].values.forEach(function (colonne) {
                liColonne.innerHTML = colonne[1] + ' <span class="type">' + colonne[2] + '</span>';
                ulColonnes.appendChild(liColonne.cloneNode(true));
            });

            liTable.appendChild(ulColonnes.cloneNode(true));
            ulTables.appendChild(liTable);
        }
    });
    zoneTables.appendChild(ulTables);
    scrollbarTables = new _perfectScrollbar2.default(zoneTables);
}

/***/ }),

/***/ "./src/sql/style/capcode-sql.scss":
/*!****************************************!*\
  !*** ./src/sql/style/capcode-sql.scss ***!
  \****************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

// extracted by mini-css-extract-plugin

/***/ }),

/***/ "codemirror":
/*!*****************************!*\
  !*** external "CodeMirror" ***!
  \*****************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = CodeMirror;

/***/ }),

/***/ "perfect-scrollbar":
/*!***********************************!*\
  !*** external "PerfectScrollbar" ***!
  \***********************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = PerfectScrollbar;

/***/ }),

/***/ "showdown":
/*!***************************!*\
  !*** external "showdown" ***!
  \***************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = showdown;

/***/ }),

/***/ "sql":
/*!**********************!*\
  !*** external "SQL" ***!
  \**********************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = SQL;

/***/ })

/******/ });
//# sourceMappingURL=capcode-sql.min.js.map