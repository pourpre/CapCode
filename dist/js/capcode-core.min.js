var capcode = typeof capcode === "object" ? capcode : {}; capcode["core"] =
/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, { enumerable: true, get: getter });
/******/ 		}
/******/ 	};
/******/
/******/ 	// define __esModule on exports
/******/ 	__webpack_require__.r = function(exports) {
/******/ 		if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 			Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 		}
/******/ 		Object.defineProperty(exports, '__esModule', { value: true });
/******/ 	};
/******/
/******/ 	// create a fake namespace object
/******/ 	// mode & 1: value is a module id, require it
/******/ 	// mode & 2: merge all properties of value into the ns
/******/ 	// mode & 4: return value when already ns object
/******/ 	// mode & 8|1: behave like require
/******/ 	__webpack_require__.t = function(value, mode) {
/******/ 		if(mode & 1) value = __webpack_require__(value);
/******/ 		if(mode & 8) return value;
/******/ 		if((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;
/******/ 		var ns = Object.create(null);
/******/ 		__webpack_require__.r(ns);
/******/ 		Object.defineProperty(ns, 'default', { enumerable: true, value: value });
/******/ 		if(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));
/******/ 		return ns;
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = "./src/core/js/capcode-core.js");
/******/ })
/************************************************************************/
/******/ ({

/***/ "./src/core/js/capcode-core.js":
/*!*************************************!*\
  !*** ./src/core/js/capcode-core.js ***!
  \*************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var _showdown = __webpack_require__(/*! showdown */ "showdown");

var _showdown2 = _interopRequireDefault(_showdown);

var _prismjs = __webpack_require__(/*! prismjs */ "prismjs");

var _prismjs2 = _interopRequireDefault(_prismjs);

var _alertify = __webpack_require__(/*! alertify */ "alertify");

var _alertify2 = _interopRequireDefault(_alertify);

__webpack_require__(/*! ../../core/js/capcode-showdown */ "./src/core/js/capcode-showdown.js");

var _capcodeUtils = __webpack_require__(/*! ../../core/js/capcode-utils */ "./src/core/js/capcode-utils.js");

__webpack_require__(/*! ../style/capcode-theme-base.scss */ "./src/core/style/capcode-theme-base.scss");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/* CONSTITUTION DE L'INTERFACE
 * Ajout d'éléments DOM
 * ------------------------------------------------------------------------------------------ */

// Déclaration des variables
var nomCookie = void 0,
    progression = void 0,
    // Progression dans le diaporama
listeDiapos = [],
    // Liste des diapos,
diapoVisible = void 0,
    // Diapo affichée
itemNavigationActif = void 0,
    // Item actif dans le menu de navigation
els = {},
    // Liste des éléments d'interface (exporté)
params = { // Paramètres passés en commentaire dans le fichier markdown source
    raw: {},
    bodyStyles: {}
},
    maxDiapoAccessible = void 0,
    // Dernière diapo non bloquée par un test à valider
listeQuestionsAFaire = {
    diapo1: {
        tests: [],
        entrainements: []
    }
},
    // Liste des questions restant à traiter
listeDivQuestions = void 0; // Liste des entrainements et évaluations bloquantes du diaporama

// Désactivation des transitions pendant le chargement de la indexPage
document.body.classList.add('preload');
// Réactivation des transitions lorsque le diaporama est chargé
window.onload = function () {
    document.body.classList.remove('preload');

    _alertify2.default.logPosition("bottom right").maxLogItems(3).delay(5000);

    // Emission d'un événement "Page chargée"
    var evtLoad = new CustomEvent('capcodeCoreLoaded', {
        "bubbles": true,
        "cancelable": false
    });

    document.dispatchEvent(evtLoad);
};

/* CONSTITUTION DU DIAPORAMA : Découpage de la source, interactions
 * @param source (string) Nom du fichier markdown à transformer en diaporama
 * @param dir (string) Chemin vers le dossier contenant la source
 */

var setDiaporama = function setDiaporama(source, dir, cookie) {
    nomCookie = cookie;
    /* LOCALSTORAGE
     * Enregistrement de la progression
     * ---------------------------------------------------------------------------------------------- */
    if (!localStorage.getItem(nomCookie)) {
        progression = {
            testsReussis: [],
            entrainementsReussis: []
        };
        updateCookie(progression, nomCookie);
    } else {
        progression = JSON.parse(localStorage.getItem(nomCookie));
    }
    // localStorage.clear();


    // Construction du DOM
    construireInterface();

    // Lecture des sources
    var md = '';
    source.forEach(function charger(fichier) {
        (0, _capcodeUtils.chargerFichier)(dir + fichier + '.md', function concatener(fichierMd) {
            md += fichierMd + '\n';
        });
    });

    // Génération du contenu HTML (voir script showdown.js)
    var converter = new _showdown2.default.Converter({
        extensions: ['capcode'],
        tables: true
    });
    converter.setFlavor('github');
    els.zoneDiapo.innerHTML = converter.makeHtml(md);

    /* Récupération des paramètres spécifiés dans le fichier source
     * ---------------------------------------------------------------------------------------------- */
    var nodeIterator = document.createNodeIterator(els.zoneDiapo, NodeFilter.SHOW_COMMENT);
    var currentNode = void 0;

    var _loop = function _loop() {
        var regex = /\s*@(\S+)\s*:\s*(.+)\s*/g;
        var match = void 0;
        while (match = regex.exec(currentNode.textContent)) {
            params.raw[match[1]] = match[2];

            // Documents annexés téléchargeables
            if (match[1] == 'doc') {
                ajouterDocs(match[2]);
            }

            // ajout d'un email de contact
            else if (match[1] == 'contact') {
                    ajouterContact(match[2]);
                }

                // Ajout des styles gobaux à certaines diapos
                else if (match[1].startsWith('diapo-avec-style-')) {
                        var listeDiapoStyles = match[2].split(/\s*,\s*/);
                        listeDiapoStyles.forEach(function (numDiapo) {
                            if (!params.bodyStyles.hasOwnProperty(numDiapo)) {
                                params.bodyStyles[numDiapo] = [];
                            }
                            params.bodyStyles[numDiapo].push(match[1].substr(17));
                        });
                    }
        }
    };

    while (currentNode = nodeIterator.nextNode()) {
        _loop();
    }

    // Découpage du diaporama
    // Parcours du DOM
    var section = document.createElement('section');
    section.classList.add('fade-out');

    var diapo = {};

    for (var i = 0; i < els.zoneDiapo.children.length; i++) {
        var noeud = els.zoneDiapo.children[i];

        // Si l'élément rencontré est de type <h1> ou <h2>, une nouvelle diapo (<section>) est initiée,
        // sinon, le noeud est ajouté à la diapo en cours.
        if (noeud.nodeName == 'H1' || noeud.nodeName == 'H2') {

            // Application d'une classe H1 ou H2 à la diapo selon le type de titre
            DOMTokenList.prototype.remove.apply(section.classList, ['H1', 'H2']);
            section.classList.add(noeud.nodeName);

            // La nouvelle diapo n'est créée que si la diapo en cours est non vide (cas d'un
            // diapo ne débutant pas par un élément <h1> ou <h2>)
            if (section.lastElementChild) {
                // lastElementChild retourne NULL si l'élément est vide

                // Footer de diapo (bouton "Continuer")
                var conteneurBoutonContinuer = (0, _capcodeUtils.ajouterElement)('div', section, {
                    class: ['footer-diapo']
                });

                var boutonPrecedent = (0, _capcodeUtils.ajouterElement)('button', conteneurBoutonContinuer, {
                    text: 'Continuer',
                    class: ['btn', 'btn--primary-light', 'btn--text', 'bouton-continuer'],
                    disabled: true
                });

                diapo.contenu = section.cloneNode(true); // Enregistrement de la diapo
                diapo.contenu.classList.add('diapo-' + (listeDiapos.length + 1));
                listeDiapos.push(diapo);

                // Nouvelle diapo => Réinitialisation de la <section> et de l'objet "diapo"
                while (section.lastElementChild) {
                    section.removeChild(section.lastElementChild);
                }
                diapo = {
                    titre: noeud.innerText
                };
                listeQuestionsAFaire['diapo' + (listeDiapos.length + 1)] = {
                    tests: [],
                    entrainements: []
                };
            }
        } else if (!section.lastElementChild) {
            // Le diaporama ne commence pas par une balise H1
            diapo.titre = 'Introduction';
        }

        if (noeud.classList.contains('test')) {
            if (progression.testsReussis.indexOf(noeud.id.substr(5)) === -1) {
                listeQuestionsAFaire['diapo' + (listeDiapos.length + 1)].tests.push(noeud.id.substr(5)); // Liste des tests bloquants de la diapo
            }
            // Test réussi précédemment et stocké dans le cookie
            else {
                    noeud.classList.add('reussi');
                }
        } else if (noeud.classList.contains('entrainement') && progression.testsReussis.indexOf(noeud.id.substr(13)) === -1) {
            if (progression.entrainementsReussis.indexOf(noeud.id.substr(13)) === -1) {
                listeQuestionsAFaire['diapo' + (listeDiapos.length + 1)].entrainements.push(noeud.id.substr(13)); // Liste des entrainements de la diapo
            }
            // Entrainement réussi précédemment et stocké dans le cookie
            else {
                    noeud.classList.add('reussi');
                }
        }

        // Ajout du noeud  à un élément <section>
        section.appendChild(noeud.cloneNode(true));
    }

    // Enregistrement de la dernière section en cours
    diapo.contenu = section.cloneNode(true);
    listeDiapos.push(diapo);

    // Reconstitution du diaporama à partir des éléments <section> enregistrés
    // Réinitialisation du conteneur principal
    while (els.zoneDiapo.lastElementChild) {
        els.zoneDiapo.removeChild(els.zoneDiapo.lastElementChild);
    }

    listeDiapos.forEach(function (diapo, index) {
        // Ajout des diapos
        els.zoneDiapo.appendChild(diapo.contenu);

        // Constitution du menu de navigation
        var itemNavigation = (0, _capcodeUtils.ajouterElement)('li', els.ulMenuNavigation, {
            class: ['inactif']
        });
        itemNavigation.innerHTML = diapo.titre;
    });
    // Ajustement de la largeur du conteneur du menu de navigation
    els.menuNavigation.style['column-count'] = Math.ceil(listeDiapos.length / ((window.innerHeight - 34) / 25));

    // Affichage du nombre total de diapos
    els.nbDiapo.innerHTML = listeDiapos.length;

    // NAVIGATION
    // Navigation par les boutons suivant et précédent
    els.boutonPrecedent.addEventListener('click', function (event) {
        naviguer(listeDiapos.indexOf(diapoVisible) - 1);
    });
    els.boutonSuivant.addEventListener('click', function (event) {
        naviguer(listeDiapos.indexOf(diapoVisible) + 1);
    });

    els.pagination.addEventListener('click', function (event) {
        toggleCard(els.menuNavigation, 'left');
    });

    // Masquage des menus par un clic sur le reste de l'ihm
    els.masque.addEventListener('click', function (event) {
        var cardVisible = document.getElementsByClassName('toggle inside');
        if (cardVisible[0].classList.contains('inside--left')) {
            toggleCard(cardVisible[0], 'left');
        } else {
            toggleCard(cardVisible[0], 'right');
        }
    });

    // Mise à jour de la navigation en fonction des tests restant à valider
    verifierTests();

    // Initialisation des interactions des QCM et des questions
    initialisationQCM();
    initialisationQuestions();

    // Sélection de la diapo à afficher d'après l'url
    var url = new URL(window.location.href);

    // L'url pointe vers une diapo
    if (url.searchParams.get("page")) {
        // Si l'url pointe vers une diapo bloquée, affichage de la dernière diapo débloquée
        if (parseInt(url.searchParams.get("page")) <= maxDiapoAccessible + 1) {
            naviguer(parseInt(url.searchParams.get("page")) - 1);
        }
        // Affichage de la diapo mentionnée dans l'url
        else {
                naviguer(maxDiapoAccessible);
            }
    }
    // L'url ne mentionne pas de diapo, affichage de la diapo 0
    else {
            naviguer(0);
        }
    _prismjs2.default.highlightAll();

    // Emission d'un événement "Mise en place du diaporama terminé"
    var evtDiapoPret = new CustomEvent('capcodeCoreDiaporama', {
        "bubbles": true,
        "cancelable": false
    });
    document.dispatchEvent(evtDiapoPret);
};

/* Construction de l'interface du diaporama dans le conteneur indiqué par l'utilisateur
 */
function construireInterface() {

    // Réinitialisation du <body>
    var contenuBody = document.body.innerHTML;
    while (document.body.lastElementChild) {
        document.body.removeChild(document.body.lastElementChild);
    }

    // Colonnes de l'interface
    els.colonneDiaporama = (0, _capcodeUtils.ajouterElement)('div', document.body, {
        class: ['colonne-diaporama']
    });
    els.colonnePratique = (0, _capcodeUtils.ajouterElement)('div', document.body, {
        class: ['colonne-pratique']
    });

    // Header et navigation
    els.headerDiaporama = (0, _capcodeUtils.ajouterElement)('header', els.colonneDiaporama, {
        class: ['actions-diaporama', 'zone-actions']
    });

    // Bouton "Précédent"
    els.boutonPrecedent = (0, _capcodeUtils.ajouterElement)('button', els.headerDiaporama, {
        class: ['btn', 'btn--default-light'],
        title: "Diapo précédente"
    });
    els.iBoutonPrecedent = (0, _capcodeUtils.ajouterElement)('i', els.boutonPrecedent, {
        text: 'arrow_back',
        class: ['material-icons']
    });

    // Pagination
    els.pagination = (0, _capcodeUtils.ajouterElement)('span', els.headerDiaporama, {
        class: ['pagination']
    });

    // Numéro de la diapo courante
    els.numDiapo = (0, _capcodeUtils.ajouterElement)('span', els.pagination);

    // Slash
    els.slashPagination = document.createTextNode('/');
    els.pagination.appendChild(els.slashPagination);

    // Nombre total de diapos
    els.nbDiapo = (0, _capcodeUtils.ajouterElement)('span', els.pagination);

    // Icône hamburger
    els.hamburger = (0, _capcodeUtils.ajouterElement)('i', els.pagination, {
        text: 'menu',
        class: ['material-icons']
    });

    // Bouton "Suivant"
    els.boutonSuivant = (0, _capcodeUtils.ajouterElement)('button', els.headerDiaporama, {
        class: ['btn', 'btn--default-light']
    });
    els.iBoutonSuivant = (0, _capcodeUtils.ajouterElement)('i', els.boutonSuivant, {
        text: 'arrow_forward',
        class: ['material-icons']
    });

    // Menu de navigation
    els.menuNavigation = (0, _capcodeUtils.ajouterElement)('div', document.body, {
        class: ['outside', 'outside--left', 'menu-navigation', 'card', 'toggle']
    });
    els.ulMenuNavigation = (0, _capcodeUtils.ajouterElement)('ul', els.menuNavigation);

    // Cadre du diaporama
    els.zoneDiapo = (0, _capcodeUtils.ajouterElement)('div', els.colonneDiaporama, {
        id: 'zone-diapo',
        class: ['zone-diapo', 'card']
    });

    // Zone d'action de la colonne de mise en pratique
    els.zoneActions = (0, _capcodeUtils.ajouterElement)('div', els.colonnePratique, {
        id: 'zone-actions',
        class: ['zone-actions']
    });

    // Espace réservé à l'ajout d'actions personnalisées
    els.actionsTheme = (0, _capcodeUtils.ajouterElement)('div', els.zoneActions, {
        id: 'actions-theme'
    });

    // Bouton "Plus d'actions"
    els.boutonPlus = (0, _capcodeUtils.ajouterElement)('button', els.zoneActions, {
        id: 'bouton-plus',
        class: ['btn', 'btn--default-light'],
        title: "Plus d'actions"
    });
    // Icone du bouton plus
    els.iconeBoutonPlus = (0, _capcodeUtils.ajouterElement)('i', els.boutonPlus, {
        class: ['material-icons'],
        text: 'more_vert'
    });
    // Menu d'actions supplémentaire
    els.menuPlus = (0, _capcodeUtils.ajouterElement)('div', document.body, {
        class: ['outside', 'outside--right', 'card', 'toggle', 'menu-plus'],
        id: 'menu-plus'
    });
    els.ulMenuPlus = (0, _capcodeUtils.ajouterElement)('ul', els.menuPlus, {
        id: 'liste-plus'
    });

    els.boutonPlus.addEventListener('click', function () {
        toggleCard(els.menuPlus, 'right');
    });
    els.menuPlus.addEventListener('click', function (event) {
        toggleCard(els.menuPlus, 'right');
    });

    // Zone d'action de la colonne de mise en pratique
    els.zonePratique = (0, _capcodeUtils.ajouterElement)('div', els.colonnePratique, {
        id: 'zone-pratique',
        class: ['zone-pratique']
    });
    els.zonePratique.innerHTML = contenuBody;

    // Fond des modales
    els.masque = (0, _capcodeUtils.ajouterElement)('div', document.body, {
        class: ['masque', 'absent']
    });

    // Emission d'un événement "Mise en place de l'interface terminée"
    var evtInterface = new CustomEvent('capcodeCoreInterface', {
        "bubbles": true,
        "cancelable": false
    });

    document.dispatchEvent(evtInterface);
}

// Navigation : affichage du nouveau contenu et mise à jour de l'historique navigateur
function naviguer(index) {
    // Mise à jour de l'historique du navigateur
    var arrUrl = window.location.pathname.split('/');
    history.pushState({
        diapo: index
    }, "titre", arrUrl[arrUrl.length - 1] + "?page=" + (index + 1));
    afficherDiapo(index);
}

// Affichage d'une nouvelle diapo
function afficherDiapo(index) {
    if (diapoVisible !== undefined) {
        diapoVisible.contenu.classList.remove('fade-in');
        diapoVisible.contenu.classList.add('fade-out');
        itemNavigationActif.classList.remove('active');

        // Suppression des classes générales appliquées à l'ensemble de la page et définies dans le fichier source
        if (params.bodyStyles[listeDiapos.indexOf(diapoVisible) + 1] !== undefined) {
            DOMTokenList.prototype.remove.apply(document.body.classList, params.bodyStyles[listeDiapos.indexOf(diapoVisible) + 1]);
        }
    }

    diapoVisible = listeDiapos[index];
    itemNavigationActif = els.ulMenuNavigation.children.item(index);
    diapoVisible.contenu.classList.remove('fade-out');
    diapoVisible.contenu.classList.add('fade-in');
    itemNavigationActif.classList.add('active');

    // Affichage des boutons de navigation
    els.numDiapo.innerHTML = index + 1;

    if (index === 0) {
        // Première diapo : Bouton "Précédent" masqué
        els.boutonPrecedent.classList.add('invisible');
    } else {
        els.boutonPrecedent.classList.remove('invisible');
    }

    if (index === listeDiapos.length - 1) {
        // Dernière diapo : Bouton "Suivant" masqué
        els.boutonSuivant.classList.add('invisible');
    } else {
        els.boutonSuivant.classList.remove('invisible');
    }

    if (index !== 0 && index !== listeDiapos.length - 1) {
        // Autres diapos, boutons "Précédent" et "Suivant" actifs
        els.boutonPrecedent.classList.remove('invisible');
        els.boutonSuivant.classList.remove('invisible');
    }

    // Désactivation des boutons "Suivant" et "Précédent"
    if (index < maxDiapoAccessible) {
        els.boutonSuivant.disabled = false;
        els.boutonSuivant.title = 'Diapo suivante';
        els.iBoutonSuivant.innerText = 'arrow_forward';
    } else {
        els.boutonSuivant.disabled = true;
        els.boutonSuivant.title = 'Réussissez le test proposé pour débloquer la suite du cours';
        els.iBoutonSuivant.innerText = 'lock';
    }

    // Ajout des classes générales appliquées à l'ensemble de la page et définies dans le fichier source
    if (params.bodyStyles[index + 1] !== undefined) {
        DOMTokenList.prototype.add.apply(document.body.classList, params.bodyStyles[index + 1]);
    }

    var evtChgtDiapo = new CustomEvent('capcodeCoreChgtDiapo', {
        detail: {
            index: index
        }
    });
    document.dispatchEvent(evtChgtDiapo);
}

/* Affichage ou masquage de la liste des diapos (menu de navigation)
 */
function toggleCard(el, direction) {
    el.classList.toggle('outside');
    el.classList.toggle('outside--' + direction);
    el.classList.toggle('inside');
    el.classList.toggle('inside--' + direction);
    els.masque.classList.toggle('absent');
}

/* Vérification des diapos bloquées du fait de tests non validées
 */
function verifierTests() {

    // Dévérouillage de la navigation après une évaluation complétée
    for (var i = 0; i < listeDiapos.length; i++) {
        activerLienNavigation(i); // Activation des liens du menu de navigation

        if (listeQuestionsAFaire['diapo' + (i + 1)].tests.length) {
            maxDiapoAccessible = i;
            break;
        }

        // Bouton "Continuer"
        var boutonContinuer = listeDiapos[i].contenu.querySelector(".bouton-continuer");
        boutonContinuer.disabled = false;
        boutonContinuer.addEventListener('click', function () {
            naviguer(listeDiapos.indexOf(diapoVisible) + 1);
        });

        // Bouton "Suivant"
        els.boutonSuivant.disabled = false;
    }
}

function activerLienNavigation(index) {
    var menuItem = els.ulMenuNavigation.children.item(index);

    if (menuItem.classList.contains('inactif')) {
        menuItem.classList.remove('inactif');
        menuItem.addEventListener('click', function () {
            toggleCard(els.menuNavigation, 'left');
            naviguer(index);
        });
    }
}

/* Gestion des QCM
 */
function initialisationQCM() {
    var listeQCM = Array.prototype.slice.call(els.zoneDiapo.querySelectorAll(".qcm"));

    listeQCM.forEach(function (question) {

        var listePropositionsReponses = Array.prototype.slice.call(question.querySelectorAll(".proposition-reponse"));

        // Modification de l'icone lors du clic sur une proposition de réponse
        function cocherCheckbox(event) {
            if (event.currentTarget.classList.contains('coche')) {
                event.currentTarget.classList.remove('coche');
                event.currentTarget.firstElementChild.innerText = 'check_box_outline_blank';
            } else {
                event.currentTarget.classList.add('coche');
                event.currentTarget.firstElementChild.innerText = 'check_box';
            }
        }

        listePropositionsReponses.forEach(function (proposition) {
            proposition.addEventListener('click', cocherCheckbox);
        });

        // Ajout du bouton "Réponse"
        var boutonReponse = (0, _capcodeUtils.ajouterElement)('div', question, {
            text: 'Voir la réponse',
            class: ['bouton-reponse']
        });

        // Correction de la question
        boutonReponse.addEventListener("click", function (event) {
            // Affichage du texte de la réponse
            question.getElementsByClassName('reponse')[0].classList.remove('absent');

            // Masquage du bouton "Afficher la réponse"
            event.target.classList.add('absent');

            // Actualisation des checkbox
            listePropositionsReponses.forEach(function (proposition) {

                // Bonne réponse non cochée
                if (proposition.classList.contains('bonne-reponse')) {
                    proposition.classList.add('success');
                }
                // Désactivation du questionnaire après affichage de la réponse
                proposition.removeEventListener('click', cocherCheckbox);
            });
        });
    });
}

/* Gestion des questions : affichage des indices
 */
function initialisationQuestions() {
    listeDivQuestions = Array.prototype.slice.call(els.zoneDiapo.querySelectorAll('.test, .entrainement'));

    listeDivQuestions.forEach(function (question) {

        var listeIndices = Array.prototype.slice.call(question.querySelectorAll('.indice'));

        if (listeIndices.length) {
            // Ajout du bouton "Afficher un indice"
            var boutonIndice = (0, _capcodeUtils.ajouterElement)('div', question, {
                text: 'Coup de pouce',
                class: ['bouton-indice']
            });

            // Affichage de l'indice
            boutonIndice.addEventListener("click", function (event) {
                // Affichage du texte de la réponse
                question.querySelector('.indice.absent').classList.remove('absent');

                // Masquage du bouton "Afficher un indice"
                if (!question.querySelector('.indice.absent')) {
                    event.target.classList.add('absent');
                }
            });
        }
    });
}

function updateCookie(progression, cookie) {
    localStorage.setItem(cookie, JSON.stringify(progression));
}

function ajouterContact(adresse) {
    els.liContact = (0, _capcodeUtils.ajouterElement)('li', els.ulMenuPlus, { id: 'li-contact' });
    (0, _capcodeUtils.ajouterElement)('i', els.liContact, {
        class: ['material-icons'],
        text: 'mail_outline'
    });
    (0, _capcodeUtils.ajouterElement)('a', els.liContact, {
        text: "Contacter l'auteur",
        href: 'mailto:' + adresse
    });
}

function ajouterDocs(docs) {
    var docsArray = docs.split(',');

    els.liDocs = (0, _capcodeUtils.ajouterElement)('li', els.ulMenuPlus, { id: 'li-docs' });
    (0, _capcodeUtils.ajouterElement)('i', els.liDocs, {
        class: ['material-icons'],
        text: 'insert_drive_file'
    });
    (0, _capcodeUtils.ajouterElement)('a', els.liDocs, {
        text: "Documents",
        class: ['cliquable']
    });

    var divDocs = (0, _capcodeUtils.ajouterElement)('div', document.body, { class: ['liste-docs', 'card', 'toggle', 'outside', 'outside--right'] });
    var ulDocs = (0, _capcodeUtils.ajouterElement)('ul', divDocs);

    docsArray.forEach(function (doc) {
        var regex = /\s*(\S[^\(]*)\s*\(([^\(]+)\)\s*/g;
        var match = void 0;
        while (match = regex.exec(doc)) {
            var liDoc = (0, _capcodeUtils.ajouterElement)('li', ulDocs);
            (0, _capcodeUtils.ajouterElement)('a', liDoc, {
                text: match[1],
                href: match[2],
                target: '_blank'
            });
        }
    });

    els.liDocs.addEventListener('click', function () {
        toggleCard(divDocs, 'right');
    });
}

/* EVENEMENTS
 * ---------------------------------------------------------------------------------------------- */
// Réception d'une bonne réponse à une question
document.addEventListener('capcodeCoreQuestionReussie', function (event) {
    var indexDiapo = event.detail.indexDiapo;
    // Test bloquant
    if (event.detail.type == 'test') {
        if (listeQuestionsAFaire['diapo' + indexDiapo].tests.indexOf(event.detail.questionId) != -1) {
            listeQuestionsAFaire['diapo' + indexDiapo].tests.splice(listeQuestionsAFaire['diapo' + indexDiapo].tests.indexOf(event.detail.questionId), 1);

            var blocQuestion = document.getElementById('test-' + event.detail.questionId);
            blocQuestion.classList.add('reussi');
            blocQuestion.children[0].classList.add('pulse');

            if (listeQuestionsAFaire['diapo' + indexDiapo].tests.length === 1) {
                _alertify2.default.success('<p><strong>Bonne réponse :)</strong></p><p>Encore un dernier effort et vous pourrez continuer !</p>');
            } else if (listeQuestionsAFaire['diapo' + indexDiapo].tests.length) {
                _alertify2.default.success('<p><strong>Bonne réponse :)</strong></p><p>Encore ' + listeQuestionsAFaire['diapo' + indexDiapo].tests.length + ' solutions à trouver avant de pouvoir continuer.</p>');
            } else {
                _alertify2.default.success('<p><strong>Félicitations ;)</strong></p><p>Vous avez débloqué la suite du cours.</p>');
            }
            verifierTests();

            // Mise à jour de la progression
            progression.testsReussis.push(event.detail.questionId);
            updateCookie(progression, nomCookie);
        }
    }
    // Entrainement
    else if (event.detail.type == 'entrainement') {
            if (listeQuestionsAFaire['diapo' + indexDiapo].entrainements.indexOf(event.detail.questionId) != -1) {
                listeQuestionsAFaire['diapo' + indexDiapo].entrainements.splice(listeQuestionsAFaire['diapo' + indexDiapo].entrainements.indexOf(event.detail.questionId), 1);

                var blocEntrainement = document.getElementById('entrainement-' + event.detail.questionId);
                blocEntrainement.classList.add('reussi');
                blocEntrainement.children[0].classList.add('pulse');
                _alertify2.default.log('<p>Bonne réponse :)</p>');

                // Mise à jour de la progression
                progression.entrainementsReussis.push(event.detail.questionId);
                updateCookie(progression, nomCookie);
            }
        }
});

// Mise à jour de l'affichage lors de l'utilisation des boutons "Précédent" et "Suivant" du navigateur
window.addEventListener('popstate', function (event) {
    afficherDiapo(event.state.diapo);
});

/* MÉTHODES PUBLIQUES
 * ------------------------------------------------------------------------------------------ */

/* Construction du diaporama
 * @param options (Object) Liste des options :
 *                              path   -> Chemin vers le dossier contenant les sources markdown.
 *                              source -> Tableau de noms de fichiers markdown à utiliser.
 *                              cookie -> Nom du ookie de stockage de la progression
 */
function lancerDiaporama(options) {
    if (!options.hasOwnProperty('path')) {
        options.path = '';
    }
    if (!options.hasOwnProperty('cookie')) {
        options.cookie = 'inconnu';
    }

    setDiaporama(options.source, options.path, options.cookie);
}

module.exports = {
    lancerDiaporama: lancerDiaporama,
    params: params
};

/***/ }),

/***/ "./src/core/js/capcode-showdown.js":
/*!*****************************************!*\
  !*** ./src/core/js/capcode-showdown.js ***!
  \*****************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

/**
 * Showdown's Extension boilerplate
 *
 * A boilerplate from where you can easily build extensions
 * for showdown
 */
(function (extension) {
    'use strict';

    // UML - Universal Module Loader
    // This enables the extension to be loaded in different environments

    if (typeof showdown !== 'undefined') {
        // global (browser or nodejs global)
        extension(showdown);
    } else if (true) {
        // AMD
        !(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(/*! showdown */ "showdown")], __WEBPACK_AMD_DEFINE_FACTORY__ = (extension),
				__WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ?
				(__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
    } else {}
})(function (showdown) {
    'use strict';

    //This is the extension code per se

    // Here you have a safe sandboxed environment where you can use "static code"
    // that is, code and data that is used accros instances of the extension itself
    // If you have regexes or some piece of calculation that is immutable
    // this is the best place to put them.

    // The following method will register the extension with showdown

    showdown.extension('capcode', function () {
        'use strict';

        // questionnaire à choix multiple

        var qcmExt = {
            type: 'lang',
            filter: function filter(text, converter) {

                var texte = void 0;

                function reponse(match, text1, offset, string) {
                    return '\n<div class="reponse absent">' + converter.makeHtml(text1.trim()) + '</div>';
                }

                function checkbox(match, coche, solution, offset, string) {
                    var rep = coche.length !== 0 ? 'bonne-reponse' : '';
                    return '\n<div class="proposition-reponse ' + rep + '"><i class="material-icons">check_box_outline_blank</i>' + solution + '</div>';
                }

                function question(match, text1, offset, string) {
                    texte = text1.replace(/\n\s*\[(x?)\](.*)/ig, checkbox);
                    texte = texte.replace(/\n\s*=>\s*(.*)/g, reponse);

                    return '<div class="question qcm"><h3>Quizz</h3>' + converter.makeHtml(texte) + '</div>';
                }

                texte = text.replace(/\n\s*\?{3}\s*qcm\s*\n((?:(?!\?{3})[\s\S])+)\?{3}/gi, question);
                return texte;
            }
        };

        // Travaux pratiques bloquants
        var evalExt = {
            type: 'lang',
            filter: function filter(text, converter) {

                var texte = void 0;

                function indice(match, text1, offset, string) {
                    return '\n<div class="indice absent">' + converter.makeHtml(text1.trim()) + '</div>';
                }

                function question(match, text1, text2, text3, offset, string) {
                    texte = text3.replace(/\n\s*=>\s*(.*)/g, indice);

                    if (text1 == 'test') {
                        return '<div id="test-' + text2 + '" class="question test"><h3>Challenge</h3>' + converter.makeHtml(texte) + '</div>';
                    } else {
                        return '<div id="entrainement-' + text2 + '" class="question entrainement"><h3>Exercice</h3>' + converter.makeHtml(texte) + '</div>';
                    }
                }

                texte = text.replace(/\n\s*\?{3}\s*(test|entrainement)\s*:\s*(\S+)\n((?:(?!\?{3})[\s\S])+)\?{3}/gi, question);
                return texte;
            }
        };

        return [qcmExt, evalExt];
    });
});

/***/ }),

/***/ "./src/core/js/capcode-utils.js":
/*!**************************************!*\
  !*** ./src/core/js/capcode-utils.js ***!
  \**************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.ajouterElement = ajouterElement;
exports.ajouterElementAvant = ajouterElementAvant;
exports.chargerFichier = chargerFichier;
exports.lireFichier = lireFichier;
exports.enregistrerFichier = enregistrerFichier;
/* UTILITAIRES
 * Manipulation de fichiers, du DOM...
 * ------------------------------------------------------------------------------------------ */

function creerElement(type) {
    var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

    var element = document.createElement(type);

    if (options.hasOwnProperty('id')) {
        // ID de l'élément
        element.id = options.id;
    }

    if (options.hasOwnProperty('text')) {
        // Texte de l'élément
        element.innerText = options.text;
    }

    if (options.hasOwnProperty('class')) {
        // Classes attribuées
        DOMTokenList.prototype.add.apply(element.classList, options.class);
    }

    if (options.hasOwnProperty('type')) {
        // type de l'élément input
        element.type = options.type;
    }

    if (options.hasOwnProperty('disabled')) {
        // Attribut DISABLED
        element.disabled = options.disabled;
    }

    if (options.hasOwnProperty('for')) {
        // Association des labels à leurs inputs
        element.htmlFor = options.for;
    }

    if (options.hasOwnProperty('src')) {
        // Attribut src
        element.src = options.src;
    }

    if (options.hasOwnProperty('href')) {
        // Attribut href
        element.href = options.href;
    }

    if (options.hasOwnProperty('title')) {
        // Attribut title
        element.title = options.title;
    }

    if (options.hasOwnProperty('target')) {
        // Attribut target
        element.target = options.target;
    }

    return element;
}

/* Fonction générique d'ajout d'un élément d'interface
 *
 * @param type (string) Type d'élément à insérer
 * @param parent (Element) Conteneur de l'élément créé
 * @param options (Object) Liste des options - 'id' : ID de l'élément créé, 'text' : contenu texte,
 *                                             'class' : tableau de classes à attribuer à l'élément,
 *                                             'disabled' : valeur de l'attribut DISABLED de l'élément
 */
function ajouterElement(type, parent) {
    var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};

    var nouvelElement = creerElement(type, options);
    parent.appendChild(nouvelElement);
    return nouvelElement;
}

function ajouterElementAvant(type, parent, reference) {
    var options = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};

    var nouvelElement = creerElement(type, options);
    parent.appendChild(nouvelElement, reference);
    return nouvelElement;
}

// Chargement du contenu d'un fichier à partir de son adresse
function chargerFichier(source, callback) {
    var f = new XMLHttpRequest();
    f.open('GET', source, false);
    f.overrideMimeType('text/plain');
    f.onreadystatechange = function () {
        if (f.readyState === 4) {
            if (f.status === 200 || f.status === 0) {
                callback(f.response);
            }
        }
    };
    f.send();
}

// Lecture d'un fichier
function lireFichier(fichier, callback) {
    var fileReader = new FileReader();
    fileReader.onload = function (event) {
        callback(event.target.result);
    };

    fileReader.readAsText(fichier, "UTF-8");
}

// Enregistrement
function enregistrerFichier(data, filename, type) {
    var file = new Blob([data], {
        type: type
    });
    if (window.navigator.msSaveOrOpenBlob) {
        // IE10+
        window.navigator.msSaveOrOpenBlob(file, filename);
    } else {
        // Others
        var a = document.createElement("a"),
            url = URL.createObjectURL(file);
        a.href = url;
        a.download = filename;
        document.body.appendChild(a);
        a.click();
        setTimeout(function () {
            document.body.removeChild(a);
            window.URL.revokeObjectURL(url);
        }, 0);
    }
}

/***/ }),

/***/ "./src/core/style/capcode-theme-base.scss":
/*!************************************************!*\
  !*** ./src/core/style/capcode-theme-base.scss ***!
  \************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

// extracted by mini-css-extract-plugin

/***/ }),

/***/ "alertify":
/*!***************************!*\
  !*** external "alertify" ***!
  \***************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = alertify;

/***/ }),

/***/ "prismjs":
/*!************************!*\
  !*** external "Prism" ***!
  \************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = Prism;

/***/ }),

/***/ "showdown":
/*!***************************!*\
  !*** external "showdown" ***!
  \***************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = showdown;

/***/ })

/******/ });
//# sourceMappingURL=capcode-core.min.js.map